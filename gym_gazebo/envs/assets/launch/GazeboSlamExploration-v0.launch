<?xml version="1.0"?>
<launch>

    <!-- <arg name="simRate" default="nan"/> -->
    <!-- Enable simulation clock -->
    <!--<param name="use_sim_time" type="bool" value="true" /> -->


    <!-- vehicle pose -->
    <arg name="x" default="-5"/>
    <arg name="y" default="3"/>
    <arg name="z" default="-5"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="-2"/>
    <!-- vehicle model and world -->
    <arg name="vehicle" default="drone_velodyne"/>
    <arg name="world" default="$(env GYM_GAZEBO_WORLD_MINE)"/>
    <env name="GAZEBO_MODEL_PATH" value="$(env GAZEBO_MODEL_PATH):/root/gym-gazebo/gym_gazebo/envs/assets/models"/>
    <arg name="sdf" default="/root/gym-gazebo/gym_gazebo/envs/assets/models/$(arg vehicle)/model.sdf"/>
    <!-- gazebo configs -->
    <arg name="gui" default="true"/>
    <arg name="verbose" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="respawn_gazebo" default="false"/>
    <!-- Gazebo sim -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="use_sim_time" value="true"/> -->
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    </include>
    <!-- gazebo model -->
    <node name="$(anon vehicle_spawn)" pkg="gazebo_ros" type="spawn_model" output="screen" args="-sdf -file $(arg sdf) -model $(arg vehicle) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/>
    <!-- frames and transformer launch -->
    <!-- <node pkg="simple_moviment" type="transformer_map_node" name="transformer_map" output="screen" /> -->
    <node pkg="simple_movement" type="transformer.py" name="transformer" output="screen" />

    <!--Launching octomap server-->

    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
        <param name="resolution" value="0.1" />
         <param name="publish_free_space" value="true" /> 
  
         <!-- fixed map frame (set to 'map' if SLAM or localization running!)  -->
         <param name="frame_id" type="string" value="map" /> 
  
         <!-- maximum range to integrate (speedup!)  -->
         <param name="sensor_model/max_range" value="10.0" /> 
  
         <remap from="cloud_in" to="/velodyne_points" /> 
     </node>

</launch>
